#!/usr/bin/env node

const program = require("commander")
const chalk = require("chalk")
const inquirer = require("inquirer")
const fse = require("fs-extra")
const path = require("path")
const { execSync } = require("child_process")

program.usage('<project-name>')

program
  .on('--help', () => {
    console.log()
    console.log('  examples:')
    console.log(chalk.gray('    #creatre a new project with providing templates'))
    console.log(chalk.green('    $ kiweb init projectName'))
  })
  .parse(process.argv)

function help(){
  if(!program.args.length){
    return program.help()
  }
}

help()

const prompts = [{
  type: 'list',
  name: 'buildTool',
  message: 'please select your project build toolï¼š',
  choices: [{
    name: 'webpack',
    value: 'webpack',
    checked: true
  }, {
    name: 'gulp',
    value: 'gulp',
    checked: false
  }]
}, {
  type: 'list',
  name: 'framework',
  message: 'please select your font-end develop framework',
  choices: [{
    name: 'react',
    value: 'react'
  }, {
    name: 'vue',
    value: 'vue'
  }, {
    name: 'none',
    value: 'none'
  }]
},{
  type: 'confirm',
  name: 'isSPA',
  message: 'Is your webapp a single-page application ?'
}]

const projectName = program.args[0]
validateProjectName(projectName)

function validateProjectName(projectName){
  if(fse.existsSync(projectName)){
    inquirer.prompt([{
      type: 'confirm',
      name: 'isContinue',
      message: 'the projectName is already existed, do you want to rewrite?',
    }]).then((answer)=>{
      if(answer.isContinue){
        fse.removeSync(projectName)
        generateProject()
      }else{
        console.error(chalk.red('Initialize interrupt'))
        process.exit(1)
      }
    })
  }else{
    generateProject()
  }
}

function generateProject(){
  inquirer.prompt(prompts).then(answer => {
    const templateName = getTemplateName(answer)
    const templateDir = path.join(getTemplateDir(), templateName)
    const projectDir = path.join(process.cwd(), projectName)
    copyTemplate(templateDir, projectDir)
  })
}

function copyTemplate(templateDir, projectDir){
  try {
    console.log(chalk.gray('The project is generating, wait please...'))
    fse.copySync(templateDir, projectDir)
    const packageJsonPath = path.join(projectDir, 'package.json')
    if(fse.existsSync(path.join(packageJsonPath))){
      let packageJson = require(packageJsonPath)
      packageJson.name = projectName
      fse.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))
    }
    console.log(chalk.green('The project was initialized successfully!'))
  }catch(err) {
    console.error(err)
  }
}

function getTemplateName(answer){
  const nameArr = []
  nameArr.push(answer.buildTool)
  if(answer.framework !== 'none'){
    nameArr.push(answer.framework)
  }
  if(answer.isSPA){
    nameArr.push("spa")
  }
  return nameArr.join("-")
}

function getTemplateDir(){
  let root
  try{
    root = execSync('npm root -g').toString().trim()
  }catch(err){
    console.log(err)
  }
  if(root){
    return path.join(root, './kiweb/templates')
  }
}
process.on('exit', ()=>{
  //console.log("process exit")
})
